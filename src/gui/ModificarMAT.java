package gui;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logica.Logic;
import logica.clasesYmetodos.Libro;

/**
 *
 * @author hunks
 */
public class ModificarMAT extends javax.swing.JFrame {
    
    Logic Logica = new Logic();

    /**
     * Creates new form ModificarMAT
     */
    public ModificarMAT() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        BtnBorrar = new javax.swing.JButton();
        BTNBUSC = new javax.swing.JButton();
        BTNMOD = new javax.swing.JButton();
        BTNSALIR = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaLibros = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setSize(600, 500);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/smart.png"))); // NOI18N

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Yu Gothic UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Libros en inventario");

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        BtnBorrar.setText("Borrar Material");

        BTNBUSC.setText("Buscar Material");

        BTNMOD.setText("Modificar Material");

        BTNSALIR.setText("Salir");
        BTNSALIR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNSALIRActionPerformed(evt);
            }
        });

        TablaLibros.setBackground(new java.awt.Color(255, 255, 255));
        TablaLibros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(TablaLibros);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(BTNMOD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BtnBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BTNBUSC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BTNSALIR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(BtnBorrar)
                        .addGap(18, 18, 18)
                        .addComponent(BTNBUSC)
                        .addGap(18, 18, 18)
                        .addComponent(BTNMOD)
                        .addGap(18, 18, 18)
                        .addComponent(BTNSALIR))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(254, 254, 254)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(201, 201, 201)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BTNSALIRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNSALIRActionPerformed
        // TODO add your handling code here:
        this.dispose();
        Principal vista = new Principal();
        vista.setVisible(true);
        vista.setLocationRelativeTo(null);
    }//GEN-LAST:event_BTNSALIRActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Metodo de arga de tabla
        cargarTabla();
    }//GEN-LAST:event_formWindowOpened



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTNBUSC;
    private javax.swing.JButton BTNMOD;
    private javax.swing.JButton BTNSALIR;
    private javax.swing.JButton BtnBorrar;
    private javax.swing.JTable TablaLibros;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public void cargarTabla() {
        //Metodo para que la tabla no sea editable por defecto
        DefaultTableModel modeloTabla = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        
        //titulos de columnas
        String titulos[]={"ID","Título","Autor","Editorial","ISBN","#Páginas","Unidades"};
        modeloTabla.setColumnIdentifiers(titulos);
        
        //Traer datos de logica
        List <Libro> listaLibros = Logica.traerLibros();
        
        //setear datos en tabla
        if(listaLibros !=null){
            for (Libro Libr:listaLibros){
                Object[] objeto = {Libr.getId(), Libr.getTitulo(), Libr.getAutor(), Libr.getEditorial(), 
                Libr.getISBN(), Libr.getNPaginas(), Libr.getUnidadesDisponibles()};
                
                modeloTabla.addRow(objeto);
            }
        }
        
        //Agregarlo a la tabla
        TablaLibros.setModel(modeloTabla);
    }
    
    // Métodos para los botones
    private void BtnBorrarActionPerformed(java.awt.event.ActionEvent evt) {
        if (TablaLibros.getRowCount() > 0) {
            if (TablaLibros.getSelectedRow() != -1) {
                Long idLibro = (Long) TablaLibros.getValueAt(TablaLibros.getSelectedRow(), 0);
                String tituloLibro = (String) TablaLibros.getValueAt(TablaLibros.getSelectedRow(), 1);
                
                int respuesta = JOptionPane.showConfirmDialog(null, 
                    "¿Está seguro de que desea borrar el libro:\n" +
                    "ID: " + idLibro + "\n" +
                    "Título: " + tituloLibro + "?", 
                    "Confirmar Borrado", 
                    JOptionPane.YES_NO_OPTION);
                
                if (respuesta == JOptionPane.YES_OPTION) {
                    Logica.eliminarLibro(idLibro);
                    JOptionPane.showMessageDialog(null, "Libro borrado exitosamente.");
                    cargarTabla();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, seleccione un libro para borrar.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "No hay libros para borrar en la tabla.");
        }
    }
    
    private void BTNMODActionPerformed(java.awt.event.ActionEvent evt) {
        if (TablaLibros.getRowCount() > 0) {
            if (TablaLibros.getSelectedRow() != -1) {
                Long idLibro = (Long) TablaLibros.getValueAt(TablaLibros.getSelectedRow(), 0);
                Libro libroAModificar = Logica.buscarLibroPorId(idLibro);
                
                if (libroAModificar != null) {
                    // Mostrar diálogos de entrada para modificar cada campo
                    String nuevoTitulo = JOptionPane.showInputDialog(this, "Modificar Título:", libroAModificar.getTitulo());
                    if (nuevoTitulo != null && !nuevoTitulo.trim().isEmpty()) {
                        String nuevoAutor = JOptionPane.showInputDialog(this, "Modificar Autor:", libroAModificar.getAutor());
                        if (nuevoAutor != null && !nuevoAutor.trim().isEmpty()) {
                            String nuevaEditorial = JOptionPane.showInputDialog(this, "Modificar Editorial:", libroAModificar.getEditorial());
                            if (nuevaEditorial != null && !nuevaEditorial.trim().isEmpty()) {
                                String nuevoISBN = JOptionPane.showInputDialog(this, "Modificar ISBN:", libroAModificar.getISBN());
                                if (nuevoISBN != null && !nuevoISBN.trim().isEmpty()) {
                                    String nuevoNPaginasStr = JOptionPane.showInputDialog(this, "Modificar # Páginas:", String.valueOf(libroAModificar.getNPaginas()));
                                    if (nuevoNPaginasStr != null && !nuevoNPaginasStr.trim().isEmpty()) {
                                        String nuevaFechaPublicacion = JOptionPane.showInputDialog(this, "Modificar Fecha de Publicación:", libroAModificar.getFechaDePublicacion());
                                        if (nuevaFechaPublicacion != null && !nuevaFechaPublicacion.trim().isEmpty()) {
                                            String nuevasUnidadesStr = JOptionPane.showInputDialog(this, "Modificar Unidades Disponibles:", libroAModificar.getUnidadesDisponibles());
                                            if (nuevasUnidadesStr != null && !nuevasUnidadesStr.trim().isEmpty()) {
                                                try {
                                                    // Validar que los números sean válidos
                                                    int nuevoNPaginas = Integer.parseInt(nuevoNPaginasStr);
                                                    int nuevasUnidades = Integer.parseInt(nuevasUnidadesStr);
                                                    
                                                    // Actualizar el libro
                                                    libroAModificar.setTitulo(nuevoTitulo.trim());
                                                    libroAModificar.setAutor(nuevoAutor.trim());
                                                    libroAModificar.setEditorial(nuevaEditorial.trim());
                                                    libroAModificar.setISBN(nuevoISBN.trim());
                                                    libroAModificar.setNPaginas(nuevoNPaginas);
                                                    libroAModificar.setFechaDePublicacion(nuevaFechaPublicacion.trim());
                                                    libroAModificar.setUnidadesDisponibles(String.valueOf(nuevasUnidades));
                                                    
                                                    // Guardar en la base de datos
                                                    Logica.modificarLibro(libroAModificar);
                                                    
                                                    JOptionPane.showMessageDialog(this, "Libro modificado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                                                    
                                                    // Actualizar la tabla
                                                    cargarTabla();
                                                    
                                                } catch (NumberFormatException e) {
                                                    JOptionPane.showMessageDialog(this, "Error: # Páginas y Unidades deben ser números válidos.", "Error de Formato", JOptionPane.ERROR_MESSAGE);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró el libro para modificar.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Por favor, seleccione un libro para modificar.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay libros para modificar en la tabla.");
        }
    }
    
    private void BTNBUSCActionPerformed(java.awt.event.ActionEvent evt) {
        String criterio = JOptionPane.showInputDialog(null, "Ingrese el Título o ID del libro a buscar:");
        if (criterio != null && !criterio.trim().isEmpty()) {
            DefaultTableModel modeloTabla = (DefaultTableModel) TablaLibros.getModel();
            modeloTabla.setRowCount(0); // Limpiar tabla actual
            
            List<Libro> listaLibros = Logica.traerLibros();
            if (listaLibros != null) {
                for (Libro libro : listaLibros) {
                    // Buscar por ID o Título
                    if (String.valueOf(libro.getId()).equals(criterio.trim()) || 
                        libro.getTitulo().toLowerCase().contains(criterio.trim().toLowerCase())) {
                        Object[] objeto = {libro.getId(), libro.getTitulo(), libro.getAutor(), libro.getEditorial(),
                                           libro.getISBN(), libro.getNPaginas(), libro.getUnidadesDisponibles()};
                        modeloTabla.addRow(objeto);
                    }
                }
            }
            if (modeloTabla.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "No se encontraron libros con el criterio: " + criterio);
                cargarTabla(); // Recargar la tabla completa si no se encuentra nada
            }
        } else if (criterio != null) { // Si el usuario no ingresó nada pero no canceló
            cargarTabla(); // Recargar la tabla completa
        }
    }
}
